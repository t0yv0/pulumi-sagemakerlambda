# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SagemakerPredictorLambdaArgs', 'SagemakerPredictorLambda']

@pulumi.input_type
class SagemakerPredictorLambdaArgs:
    def __init__(__self__, *,
                 column_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 model_data_bucket: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_key: Optional[pulumi.Input[str]] = None,
                 model_framework: Optional[pulumi.Input[str]] = None,
                 model_image: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SagemakerPredictorLambda resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] column_names: TODO
        :param pulumi.Input[str] model_data_bucket: TODO
        :param pulumi.Input[str] account_id: TODO
        :param pulumi.Input[int] initial_instance_count: TODO
        :param pulumi.Input[str] instance_type: TODO
        :param pulumi.Input[str] model_data_key: TODO
        :param pulumi.Input[str] model_framework: TODO
        :param pulumi.Input[str] model_image: TODO
        :param pulumi.Input[str] region: TODO
        """
        pulumi.set(__self__, "column_names", column_names)
        pulumi.set(__self__, "model_data_bucket", model_data_bucket)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if initial_instance_count is not None:
            pulumi.set(__self__, "initial_instance_count", initial_instance_count)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if model_data_key is not None:
            pulumi.set(__self__, "model_data_key", model_data_key)
        if model_framework is not None:
            pulumi.set(__self__, "model_framework", model_framework)
        if model_image is not None:
            pulumi.set(__self__, "model_image", model_image)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        TODO
        """
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="modelDataBucket")
    def model_data_bucket(self) -> pulumi.Input[str]:
        """
        TODO
        """
        return pulumi.get(self, "model_data_bucket")

    @model_data_bucket.setter
    def model_data_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "model_data_bucket", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="initialInstanceCount")
    def initial_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        TODO
        """
        return pulumi.get(self, "initial_instance_count")

    @initial_instance_count.setter
    def initial_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_instance_count", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="modelDataKey")
    def model_data_key(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "model_data_key")

    @model_data_key.setter
    def model_data_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_data_key", value)

    @property
    @pulumi.getter(name="modelFramework")
    def model_framework(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "model_framework")

    @model_framework.setter
    def model_framework(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_framework", value)

    @property
    @pulumi.getter(name="modelImage")
    def model_image(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "model_image")

    @model_image.setter
    def model_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model_image", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class SagemakerPredictorLambda(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_bucket: Optional[pulumi.Input[str]] = None,
                 model_data_key: Optional[pulumi.Input[str]] = None,
                 model_framework: Optional[pulumi.Input[str]] = None,
                 model_image: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SagemakerPredictorLambda resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: TODO
        :param pulumi.Input[Sequence[pulumi.Input[str]]] column_names: TODO
        :param pulumi.Input[int] initial_instance_count: TODO
        :param pulumi.Input[str] instance_type: TODO
        :param pulumi.Input[str] model_data_bucket: TODO
        :param pulumi.Input[str] model_data_key: TODO
        :param pulumi.Input[str] model_framework: TODO
        :param pulumi.Input[str] model_image: TODO
        :param pulumi.Input[str] region: TODO
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SagemakerPredictorLambdaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SagemakerPredictorLambda resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SagemakerPredictorLambdaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SagemakerPredictorLambdaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 initial_instance_count: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 model_data_bucket: Optional[pulumi.Input[str]] = None,
                 model_data_key: Optional[pulumi.Input[str]] = None,
                 model_framework: Optional[pulumi.Input[str]] = None,
                 model_image: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SagemakerPredictorLambdaArgs.__new__(SagemakerPredictorLambdaArgs)

            __props__.__dict__["account_id"] = account_id
            if column_names is None and not opts.urn:
                raise TypeError("Missing required property 'column_names'")
            __props__.__dict__["column_names"] = column_names
            __props__.__dict__["initial_instance_count"] = initial_instance_count
            __props__.__dict__["instance_type"] = instance_type
            if model_data_bucket is None and not opts.urn:
                raise TypeError("Missing required property 'model_data_bucket'")
            __props__.__dict__["model_data_bucket"] = model_data_bucket
            __props__.__dict__["model_data_key"] = model_data_key
            __props__.__dict__["model_framework"] = model_framework
            __props__.__dict__["model_image"] = model_image
            __props__.__dict__["region"] = region
            __props__.__dict__["endpoint_name"] = None
            __props__.__dict__["lambda_function_name"] = None
            __props__.__dict__["training_role_arn"] = None
        super(SagemakerPredictorLambda, __self__).__init__(
            'sagemakerlambda:index:SagemakerPredictorLambda',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="endpointName")
    def endpoint_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the provisioned SageMaker endpoint.  TODO can we just pass Endpoint type?
        """
        return pulumi.get(self, "endpoint_name")

    @property
    @pulumi.getter(name="lambdaFunctionName")
    def lambda_function_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of the provisioned Lambda function.  TODO can we just return the native object?
        """
        return pulumi.get(self, "lambda_function_name")

    @property
    @pulumi.getter(name="trainingRoleArn")
    def training_role_arn(self) -> pulumi.Output[str]:
        """
        ARN of the provisioned role that can be reused for model training.
        """
        return pulumi.get(self, "training_role_arn")

