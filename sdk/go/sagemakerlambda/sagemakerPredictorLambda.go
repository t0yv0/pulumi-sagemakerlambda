// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package sagemakerlambda

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SagemakerPredictorLambda struct {
	pulumi.ResourceState

	// Name of the provisioned SageMaker endpoint.  TODO can we just pass Endpoint type?
	EndpointName pulumi.StringPtrOutput `pulumi:"endpointName"`
	// Name of the provisioned Lambda function.  TODO can we just return the native object?
	LambdaFunctionName pulumi.StringPtrOutput `pulumi:"lambdaFunctionName"`
	// ARN of the provisioned role that can be reused for model training.
	TrainingRoleArn pulumi.StringOutput `pulumi:"trainingRoleArn"`
}

// NewSagemakerPredictorLambda registers a new resource with the given unique name, arguments, and options.
func NewSagemakerPredictorLambda(ctx *pulumi.Context,
	name string, args *SagemakerPredictorLambdaArgs, opts ...pulumi.ResourceOption) (*SagemakerPredictorLambda, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColumnNames == nil {
		return nil, errors.New("invalid value for required argument 'ColumnNames'")
	}
	if args.ModelDataBucket == nil {
		return nil, errors.New("invalid value for required argument 'ModelDataBucket'")
	}
	var resource SagemakerPredictorLambda
	err := ctx.RegisterRemoteComponentResource("sagemakerlambda:index:SagemakerPredictorLambda", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type sagemakerPredictorLambdaArgs struct {
	// TODO
	AccountId *string `pulumi:"accountId"`
	// TODO
	ColumnNames []string `pulumi:"columnNames"`
	// TODO
	InitialInstanceCount *int `pulumi:"initialInstanceCount"`
	// TODO
	InstanceType *string `pulumi:"instanceType"`
	// TODO
	ModelDataBucket string `pulumi:"modelDataBucket"`
	// TODO
	ModelDataKey *string `pulumi:"modelDataKey"`
	// TODO
	ModelFramework *string `pulumi:"modelFramework"`
	// TODO
	ModelImage *string `pulumi:"modelImage"`
	// TODO
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SagemakerPredictorLambda resource.
type SagemakerPredictorLambdaArgs struct {
	// TODO
	AccountId pulumi.StringPtrInput
	// TODO
	ColumnNames pulumi.StringArrayInput
	// TODO
	InitialInstanceCount pulumi.IntPtrInput
	// TODO
	InstanceType pulumi.StringPtrInput
	// TODO
	ModelDataBucket pulumi.StringInput
	// TODO
	ModelDataKey pulumi.StringPtrInput
	// TODO
	ModelFramework pulumi.StringPtrInput
	// TODO
	ModelImage pulumi.StringPtrInput
	// TODO
	Region pulumi.StringPtrInput
}

func (SagemakerPredictorLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sagemakerPredictorLambdaArgs)(nil)).Elem()
}

type SagemakerPredictorLambdaInput interface {
	pulumi.Input

	ToSagemakerPredictorLambdaOutput() SagemakerPredictorLambdaOutput
	ToSagemakerPredictorLambdaOutputWithContext(ctx context.Context) SagemakerPredictorLambdaOutput
}

func (*SagemakerPredictorLambda) ElementType() reflect.Type {
	return reflect.TypeOf((*SagemakerPredictorLambda)(nil))
}

func (i *SagemakerPredictorLambda) ToSagemakerPredictorLambdaOutput() SagemakerPredictorLambdaOutput {
	return i.ToSagemakerPredictorLambdaOutputWithContext(context.Background())
}

func (i *SagemakerPredictorLambda) ToSagemakerPredictorLambdaOutputWithContext(ctx context.Context) SagemakerPredictorLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SagemakerPredictorLambdaOutput)
}

func (i *SagemakerPredictorLambda) ToSagemakerPredictorLambdaPtrOutput() SagemakerPredictorLambdaPtrOutput {
	return i.ToSagemakerPredictorLambdaPtrOutputWithContext(context.Background())
}

func (i *SagemakerPredictorLambda) ToSagemakerPredictorLambdaPtrOutputWithContext(ctx context.Context) SagemakerPredictorLambdaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SagemakerPredictorLambdaPtrOutput)
}

type SagemakerPredictorLambdaPtrInput interface {
	pulumi.Input

	ToSagemakerPredictorLambdaPtrOutput() SagemakerPredictorLambdaPtrOutput
	ToSagemakerPredictorLambdaPtrOutputWithContext(ctx context.Context) SagemakerPredictorLambdaPtrOutput
}

type sagemakerPredictorLambdaPtrType SagemakerPredictorLambdaArgs

func (*sagemakerPredictorLambdaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SagemakerPredictorLambda)(nil))
}

func (i *sagemakerPredictorLambdaPtrType) ToSagemakerPredictorLambdaPtrOutput() SagemakerPredictorLambdaPtrOutput {
	return i.ToSagemakerPredictorLambdaPtrOutputWithContext(context.Background())
}

func (i *sagemakerPredictorLambdaPtrType) ToSagemakerPredictorLambdaPtrOutputWithContext(ctx context.Context) SagemakerPredictorLambdaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SagemakerPredictorLambdaPtrOutput)
}

// SagemakerPredictorLambdaArrayInput is an input type that accepts SagemakerPredictorLambdaArray and SagemakerPredictorLambdaArrayOutput values.
// You can construct a concrete instance of `SagemakerPredictorLambdaArrayInput` via:
//
//          SagemakerPredictorLambdaArray{ SagemakerPredictorLambdaArgs{...} }
type SagemakerPredictorLambdaArrayInput interface {
	pulumi.Input

	ToSagemakerPredictorLambdaArrayOutput() SagemakerPredictorLambdaArrayOutput
	ToSagemakerPredictorLambdaArrayOutputWithContext(context.Context) SagemakerPredictorLambdaArrayOutput
}

type SagemakerPredictorLambdaArray []SagemakerPredictorLambdaInput

func (SagemakerPredictorLambdaArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SagemakerPredictorLambda)(nil))
}

func (i SagemakerPredictorLambdaArray) ToSagemakerPredictorLambdaArrayOutput() SagemakerPredictorLambdaArrayOutput {
	return i.ToSagemakerPredictorLambdaArrayOutputWithContext(context.Background())
}

func (i SagemakerPredictorLambdaArray) ToSagemakerPredictorLambdaArrayOutputWithContext(ctx context.Context) SagemakerPredictorLambdaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SagemakerPredictorLambdaArrayOutput)
}

// SagemakerPredictorLambdaMapInput is an input type that accepts SagemakerPredictorLambdaMap and SagemakerPredictorLambdaMapOutput values.
// You can construct a concrete instance of `SagemakerPredictorLambdaMapInput` via:
//
//          SagemakerPredictorLambdaMap{ "key": SagemakerPredictorLambdaArgs{...} }
type SagemakerPredictorLambdaMapInput interface {
	pulumi.Input

	ToSagemakerPredictorLambdaMapOutput() SagemakerPredictorLambdaMapOutput
	ToSagemakerPredictorLambdaMapOutputWithContext(context.Context) SagemakerPredictorLambdaMapOutput
}

type SagemakerPredictorLambdaMap map[string]SagemakerPredictorLambdaInput

func (SagemakerPredictorLambdaMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SagemakerPredictorLambda)(nil))
}

func (i SagemakerPredictorLambdaMap) ToSagemakerPredictorLambdaMapOutput() SagemakerPredictorLambdaMapOutput {
	return i.ToSagemakerPredictorLambdaMapOutputWithContext(context.Background())
}

func (i SagemakerPredictorLambdaMap) ToSagemakerPredictorLambdaMapOutputWithContext(ctx context.Context) SagemakerPredictorLambdaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SagemakerPredictorLambdaMapOutput)
}

type SagemakerPredictorLambdaOutput struct {
	*pulumi.OutputState
}

func (SagemakerPredictorLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SagemakerPredictorLambda)(nil))
}

func (o SagemakerPredictorLambdaOutput) ToSagemakerPredictorLambdaOutput() SagemakerPredictorLambdaOutput {
	return o
}

func (o SagemakerPredictorLambdaOutput) ToSagemakerPredictorLambdaOutputWithContext(ctx context.Context) SagemakerPredictorLambdaOutput {
	return o
}

func (o SagemakerPredictorLambdaOutput) ToSagemakerPredictorLambdaPtrOutput() SagemakerPredictorLambdaPtrOutput {
	return o.ToSagemakerPredictorLambdaPtrOutputWithContext(context.Background())
}

func (o SagemakerPredictorLambdaOutput) ToSagemakerPredictorLambdaPtrOutputWithContext(ctx context.Context) SagemakerPredictorLambdaPtrOutput {
	return o.ApplyT(func(v SagemakerPredictorLambda) *SagemakerPredictorLambda {
		return &v
	}).(SagemakerPredictorLambdaPtrOutput)
}

type SagemakerPredictorLambdaPtrOutput struct {
	*pulumi.OutputState
}

func (SagemakerPredictorLambdaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SagemakerPredictorLambda)(nil))
}

func (o SagemakerPredictorLambdaPtrOutput) ToSagemakerPredictorLambdaPtrOutput() SagemakerPredictorLambdaPtrOutput {
	return o
}

func (o SagemakerPredictorLambdaPtrOutput) ToSagemakerPredictorLambdaPtrOutputWithContext(ctx context.Context) SagemakerPredictorLambdaPtrOutput {
	return o
}

type SagemakerPredictorLambdaArrayOutput struct{ *pulumi.OutputState }

func (SagemakerPredictorLambdaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SagemakerPredictorLambda)(nil))
}

func (o SagemakerPredictorLambdaArrayOutput) ToSagemakerPredictorLambdaArrayOutput() SagemakerPredictorLambdaArrayOutput {
	return o
}

func (o SagemakerPredictorLambdaArrayOutput) ToSagemakerPredictorLambdaArrayOutputWithContext(ctx context.Context) SagemakerPredictorLambdaArrayOutput {
	return o
}

func (o SagemakerPredictorLambdaArrayOutput) Index(i pulumi.IntInput) SagemakerPredictorLambdaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SagemakerPredictorLambda {
		return vs[0].([]SagemakerPredictorLambda)[vs[1].(int)]
	}).(SagemakerPredictorLambdaOutput)
}

type SagemakerPredictorLambdaMapOutput struct{ *pulumi.OutputState }

func (SagemakerPredictorLambdaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SagemakerPredictorLambda)(nil))
}

func (o SagemakerPredictorLambdaMapOutput) ToSagemakerPredictorLambdaMapOutput() SagemakerPredictorLambdaMapOutput {
	return o
}

func (o SagemakerPredictorLambdaMapOutput) ToSagemakerPredictorLambdaMapOutputWithContext(ctx context.Context) SagemakerPredictorLambdaMapOutput {
	return o
}

func (o SagemakerPredictorLambdaMapOutput) MapIndex(k pulumi.StringInput) SagemakerPredictorLambdaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SagemakerPredictorLambda {
		return vs[0].(map[string]SagemakerPredictorLambda)[vs[1].(string)]
	}).(SagemakerPredictorLambdaOutput)
}

func init() {
	pulumi.RegisterOutputType(SagemakerPredictorLambdaOutput{})
	pulumi.RegisterOutputType(SagemakerPredictorLambdaPtrOutput{})
	pulumi.RegisterOutputType(SagemakerPredictorLambdaArrayOutput{})
	pulumi.RegisterOutputType(SagemakerPredictorLambdaMapOutput{})
}
